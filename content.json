{"meta":{"title":"Mcola 博客","subtitle":"","description":"","author":"Mcola","url":"https://machenye.github.io","root":"/"},"pages":[{"title":"Categories","date":"2024-08-23T02:44:08.683Z","updated":"2024-08-23T02:44:08.683Z","comments":false,"path":"categories/index.html","permalink":"https://machenye.github.io/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2024-08-23T02:44:17.872Z","updated":"2024-08-23T02:44:17.872Z","comments":true,"path":"links/index.html","permalink":"https://machenye.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"终于拿到驾照了","slug":"终于拿到驾照了","date":"2024-08-29T03:39:08.000Z","updated":"2024-08-29T04:59:07.037Z","comments":false,"path":"2024/08/29/终于拿到驾照了/","permalink":"https://machenye.github.io/2024/08/29/%E7%BB%88%E4%BA%8E%E6%8B%BF%E5%88%B0%E9%A9%BE%E7%85%A7%E4%BA%86/","excerpt":"","text":"刷学时 记得8月2号就开始刷科目三的学时了，但我科目二还没考过，这样只是说如果我科目二过了就可以在这个暑假考一次科三，有这个机会而已。那个时候天天晚上6点多刷到10点回去，车上又不开空调，晚上蚊子也多，只好天天在抖音看瓦的直播，而且也没灯，太痛苦了。 8月17日终于把科目二过了 8月17号考的科目二，已经是第四次考了，之前考了三次C1，都挂在半坡起步上，要么是压线，要么是距离大于50公分，后面就考虑直接换成C2，可以跳过这个项目了，之前的几个项目都没什么问题，之前都是比较轻松就可以过的，但是考试那天突然下了大雨，后视镜都有点看不清，点位也不是很好对了，还好早上去考场模拟了一下，知道把窗户摇下来，这样雾气不是很大，还好最后顺利通过了，满分通过。 8月24号考的科三 科三总共就练了三天，说实话心里还是没有底的，而且平常练习也不是去考场练的，就是在驾校周边的道路上开，练习变道，超车什么的，但是这个路线只能看网上的视频来记忆，本来感觉去多开几遍印象会更深一点，但是深圳这边就是这么规定的。 考试前一天晚上教练带我去考场模拟了一下，每条线就走了一遍，我本来还以为可以多走几遍的，这个时候心里还是很慌的。我考试的时间是在下午，然后我上午很早就过去了，想着多看几遍路线，我一到那边就有很多摩的在那边拉客，就带着看路线，然后讲解一下项目，花了80块钱，请了一个大叔帮我把三条线都走了一遍，总比没有要好。 我考试的时候已经开出去了才感觉座椅有点矮，打方向盘有点奇怪的感觉，和驾校的车完全不一样，而且加速特别快，那个时候都不敢踩油门，但是又怕里程不够，这个车的速度不是很稳，好像我的变道项目提前做了，但是也没什么问题，后面担心里程不够，在直线行驶到最后终点的那段路我开的比较快开到25左右了，好在最后靠边停车没有什么问题，最后满分通过了。 8月27号考的科四，顺利拿证 这几天我一直都在刷题，总共顺序从头到尾1400多道题刷了2遍，然后也一直在模拟，最后模拟出来都是100左右了，才去考的科四，最后也是满分通过了。 有些题目有点奇葩，还有那种很长的文字题，一不小心就看错了。 不管怎么说总算是拿证了。","categories":[{"name":"生活日常","slug":"生活日常","permalink":"https://machenye.github.io/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"}],"tags":[]},{"title":"ML and Data Analyze","slug":"ML and Data Analyze","date":"2024-08-20T08:58:46.000Z","updated":"2024-08-23T02:48:35.427Z","comments":true,"path":"2024/08/20/ML and Data Analyze/","permalink":"https://machenye.github.io/2024/08/20/ML%20and%20Data%20Analyze/","excerpt":"","text":"内容在github上，可以点击查看 主要内容 进行数据清理 数据统计与分析 使用ML的函数如KNN,线性回归，逻辑回归等方法来预测表格中的数据，如在BikeBuyers表中为根据购买者的年收入，家庭地址，家中有几个小孩等等因素来预测该购买者的类型（高消费，低消费等等，用数字表示），在Zombie Enterpri中则根据企业的一些因素来预测该企业是否为僵尸企业（flag为1则表示是） 可以使用一些函数来分析哪些因素与要预测的东西最相关，使用这些因素作为ML函数中的形参，这样可以训练出更好，更精准的模型 参加这个暑期的课程也属实是超出了我的预料，一开始报名了之后就忘记了这件事了，后面去社会实践的时候这边已经开始上课了，虽然上课非常无聊，上午就放ML的视频，下午就用chatgpt或者copilot生成一下代码，然后不断地调试，最后做个汇报写个文档就结束了，学校的这些活动大部分都十分无聊且没用，以后不要再被老师忽悠过来了，非常劝退！！","categories":[{"name":"学校学习","slug":"学校学习","permalink":"https://machenye.github.io/categories/%E5%AD%A6%E6%A0%A1%E5%AD%A6%E4%B9%A0/"}],"tags":[]},{"title":"JS 学习笔记","slug":"JS-学习笔记","date":"2024-08-20T08:53:46.000Z","updated":"2024-08-23T02:48:29.531Z","comments":false,"path":"2024/08/20/JS-学习笔记/","permalink":"https://machenye.github.io/2024/08/20/JS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"本篇文章为作者在网上自学JS时的笔记，看的狂神的b站视频视频链接 概述本人认为JS的语法和Java，python及其相似，像是融合了这两种语言的语法 快速引入引入JavaScript内部标签123&lt;script&gt; \\\\\\ js代码 &lt;/script&gt; 外部标签1&lt;script src = &quot;xxx.js&quot;&gt;&lt;/script&gt; 基本语法1234567// 变量的类型可以任意var num = 1;var name = &quot;mcola&quot;;var float = 1.1;// 注意变量名不能以数字开头，但是可以用中文命名 输出123alert(xxx); // 在页面弹窗输出内容console.log(xxx); // 在页面的控制台（F12）输出内容 数据类型比较运算符1234567= == //等于（类型不一样，值相同也为true）=== // 绝对等于（要求类型和值均相同才为true）------------------------NaN === NaN // 为false，NaN与任何值都不相同包括它自己// 只能通过isNaN(NaN)来判断 数组1234567891011121314151617181920212223242526272829303132333435363738394041var array = [1,2,3,1.1,&quot;mcola&quot;];// 改变数组长度则数组的空间也会变化 array.length = 10; // 则array就会变为有10个元素的数组，后面的元素为空 array.length = 2; // 则只有索引为0和1的元素，其他元素丢失// 根据元素获取下标 array.indexOf(1.1) // 则会输出3 // slice()arr.slice(3); // 从下标3开始往后截，生成一个新的数组// push()arr.push(&#x27;a&#x27;); // 在数组最后添加// pop()arr.pop(); // 输出数组最后一个元素，并删除这个元素 // unshift();arr.unshift(&#x27;a&#x27;); // 在头部插入一个元素// shift();arr.shift(); // 弹出头部的元素// sort();arr.sort(); // 排序// reverse();arr.reverse(); // 数组反转// concat();arr.concat([1,2,3]); // 添加一个新的数组在尾部，但是不改变原来的数组// join();arr.join(&#x27;-&#x27;); // 打印数组，使用特定的拼接符链接// 多维数组arr = [[1,2],[3,4]] // 与c++一样 取数组下标，如果越界了就会显示undefined（未定义），而不是null（空） 对象1234567891011121314151617181920212223// 定义一个对象var person = &#123; name:&quot;mcola&quot;, // 使用逗号分隔不同属性 age:20, school:ZJUT;&#125;// 取对象的值,直接在控制台输入即可输出person.nameperson.age// 动态删除属性delete person.age;// 动态添加属性person.hobby = &quot;playing&quot;; // 只要对一个没定义的属性赋值就会添加这个属性// 判断属性值是否在对象中&#x27;age&#x27; in person // 输出为true则在// 但是这包括了继承的属性// 判断属性值是否是这个对象自身拥有的person.hasOwnProperty(&#x27;age&#x27;); 严格检查机制12&#x27;use strict&#x27; // 在script代码最开始写上这个let num = 1; // 后面都这样定义变量 字符串1234567891011121314151617181920212223242526272829303132333435// 转义字符/&#x27;/t/n// 输入多行字符串var msg = ` hello world`// 模板字符串let name = &quot;mcola&quot;;let msg = `hello , $&#123;name&#125;` // 输出hello , mcola// 字符串长度string.length// 字符串的不可变性var str = &quot;hello&quot;; // 不能通过str[0]=&#x27;a&#x27;来修改字符串// 字符串的一些方法 // 大小写转换 student.toUpperCase() student.toLowerCase() // 获取某个元素的下标 student.indexOf(&#x27;t&#x27;) // 在student字符串中t元素所在的下标 // substring [) // 前闭后开 student.substring(1) // 从索引为1的字符截取到最后 student.substring(1,3) // 总索引为1的字符截取到索引为3（不包括3）的字符 Map12345var map = new Map([[&quot;tom&quot;,100],[&quot;jack&quot;,90]]);var score = map.get(&quot;tom&quot;); // 通过key获得valuemap.set(&quot;mcola&quot;,123); // 添加元素map.delete(&quot;tom&quot;); // 删除 Set12345// 无序不重复集合var set = new Set([1,2,3,3]); // 输出为1，2，3 ，自动去重set.add(4); // 添加元素set.delete(3); // 删除元素set.has(1); // 判断是否包含 iterator遍历Map和Set123456789var map = new Map([[&quot;tom&quot;,100],[&quot;jack&quot;,90]]);for (let x of map)&#123; console.log(x); &#125;var set = new Set([1,2,3,3]);for (let x of set)&#123; console.log(x);&#125; 流程控制if判断123456// 与其他语言一样if(num&gt;12)&#123; xxx&#125;else &#123; xxx&#125; while循环12345678910// 与其他语言一样while(n&lt;m)&#123; console.log(n); n++;&#125;do&#123; console.log(n); n++;&#125;while(n&lt;m) for循环123for (let i=0;i&lt;10;i++)&#123; console.log(i);&#125; 数组循环12345678910111213141516var array = [1,2,3,1.2,&quot;mcola&quot;];for(var i in array)&#123; console.log(array(i); // 输出数组中的每一个元素,i为索引&#125;// 注意区分------------------------for(var i of array)&#123; console.log(i); // 输出数组中的每一个元素,i为元素&#125;// forEach循环array.forEach(function(value)&#123; cosole.log(value);&#125;) 函数 定义方式一(建议） 12345function abs(x)&#123; if(x&gt;=0)&#123; return x; &#125;else return -x;&#125; 定义方式二 12345var abs = function(x)&#123; if(x&gt;=0)&#123; return x; &#125;else return -x;&#125; 调用函数 1abs(10); 参数问题 可以传递任意个参数，也可以不传递参数 ‘arguments’ 代表传进来的所有参数是一个数组，可以拿出来所有传入的参数 Rest 123function add(a,b,...rest)&#123; console.log(rest); // 将剩下未定义的参数全部放到一个数组中&#125; 规避参数异常 123if(typeof x !== number)&#123; throw &#x27;Not a number&#x27;;&#125; 变量的作用域 在函数体内用var定义的变量在函数体外是不能用的（闭包） 12345678&#x27;use strict&#x27;;function f() &#123; var x = 1;&#125;x = x + 1; // Uncaught ReferenceError: x is not defined--------------------------------------- 内部函数可以访问外部函数的变量，反之不行 12345678&#x27;use strict&#x27;;function f() &#123; var x = 1; function f2()&#123; var y = x + 1;// 2 &#125; var z = x + y; // 报错&#125; 调用函数从内向外，内部屏蔽外部函数的同名变量 123456789function f() &#123; var x = 1; function f2()&#123; var x = &#x27;a&#x27;; console.log(x); // a &#125; console.log(x); // 1 f2(); &#125; JS自动提升了变量的声明，但是不会提升赋值 12345678910111213function f() &#123; var x = &#x27;1&#x27;+y; console.log(x); // 1undefined var y = 2;&#125; // 这两个函数是等价的function f2()&#123; var y; var x = &#x27;1&#x27;+y; console.log(x); y = 2;&#125; 规范：把所有变量的定义全部放在最前面 123456 function f() &#123; var x = 1, y = x + 1, z,m; // ... &#125; 全局变量：定义在函数外部 默认所有全局变量会自动绑定在window对象下，为了减少重名的冲突，把自己的代码全部放入自己定义的唯一空间名中（jQuery） 1234567var x = 1;function f()&#123; console.log(x);&#125;console.log(window.x); // 等价alert(x);window.alert(x); // alert也是绑定在window对象下的 局部作用域：let 123456function f() &#123; for (var i = 0; i &lt; 5; i++) &#123; console.log(i); &#125; console.log(i+1); // 能够在循环体外面使用i&#125; 使用let可以解决这个问题，建议使用let定义局部作用域 123456function f() &#123; for (let i = 0; i &lt; 5; i++) &#123; console.log(i); &#125; console.log(i+1); // 能够在循环体外面使用i&#125; 常量 const 在ES6之前，约定全部大写的变量为常量，但是任然可以改变 12var PI = 3.14;PI = 213; 在ES6引入const，这样强制规定不能改变变量 方法 定义方式 把函数放在对象里 12345678910111213var person = &#123; name: mcola, birth: 2003, age: function()&#123; var now = new Date().getFullYear(); return now-this.birth; &#125;&#125;// 调用属性person.name// 调用方法person.age()","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://machenye.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[]},{"title":"搭建博客","slug":"搭建博客","date":"2024-08-20T07:26:34.000Z","updated":"2024-08-23T03:26:45.617Z","comments":false,"path":"2024/08/20/搭建博客/","permalink":"https://machenye.github.io/2024/08/20/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"想重新熟悉一下怎么搭建一个博客，于是就有了这个新的博客 这次使用的是hexo来搭建博客，之前使用过 hugo 这个太过久远了都忘记怎么上传了 notion-next+vercel服务器 这个必须要挂梯子才能使用，而且速度特别慢，编辑文章非常不方便 想过租一个服务器但是价格有点贵，而且感觉用不太到，可能后面需要把自己做的一些vue+springboot项目部署的时候才可能会用到 搭建博客的b站链接 使用hexo并且部署到github的服务器上，可以本地预览，也可以上传到服务器上，后面买了个域名但是还在备案，等后面域名好了，就可以不用挂梯子也能访问这个博客了 阿里云域名链接现在域名已经成功搞好了，用的是阿里的域名，感觉操作起来还是很方便的，可以直接访问mcola.cn来访问我的博客了，然后最近又调整了一下博客的排版样式，现在应该就没有什么问题了，接下来就努力更新就好了","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"https://machenye.github.io/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[]}],"categories":[{"name":"生活日常","slug":"生活日常","permalink":"https://machenye.github.io/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"},{"name":"学校学习","slug":"学校学习","permalink":"https://machenye.github.io/categories/%E5%AD%A6%E6%A0%A1%E5%AD%A6%E4%B9%A0/"},{"name":"前端学习","slug":"前端学习","permalink":"https://machenye.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"},{"name":"网站搭建","slug":"网站搭建","permalink":"https://machenye.github.io/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[]}